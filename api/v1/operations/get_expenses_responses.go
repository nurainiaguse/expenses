// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/nurainiaguse/expenses/api/v1/models"
)

// GetExpensesOKCode is the HTTP code returned for type GetExpensesOK
const GetExpensesOKCode int = 200

/*GetExpensesOK OK

swagger:response getExpensesOK
*/
type GetExpensesOK struct {

	/*
	  In: Body
	*/
	Payload *models.Expenses `json:"body,omitempty"`
}

// NewGetExpensesOK creates GetExpensesOK with default headers values
func NewGetExpensesOK() *GetExpensesOK {

	return &GetExpensesOK{}
}

// WithPayload adds the payload to the get expenses o k response
func (o *GetExpensesOK) WithPayload(payload *models.Expenses) *GetExpensesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get expenses o k response
func (o *GetExpensesOK) SetPayload(payload *models.Expenses) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExpensesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetExpensesBadRequestCode is the HTTP code returned for type GetExpensesBadRequest
const GetExpensesBadRequestCode int = 400

/*GetExpensesBadRequest BAD REQUEST

swagger:response getExpensesBadRequest
*/
type GetExpensesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.RouteError `json:"body,omitempty"`
}

// NewGetExpensesBadRequest creates GetExpensesBadRequest with default headers values
func NewGetExpensesBadRequest() *GetExpensesBadRequest {

	return &GetExpensesBadRequest{}
}

// WithPayload adds the payload to the get expenses bad request response
func (o *GetExpensesBadRequest) WithPayload(payload *models.RouteError) *GetExpensesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get expenses bad request response
func (o *GetExpensesBadRequest) SetPayload(payload *models.RouteError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExpensesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
