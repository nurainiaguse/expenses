// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetExpensesHandlerFunc turns a function with the right signature into a get expenses handler
type GetExpensesHandlerFunc func(GetExpensesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetExpensesHandlerFunc) Handle(params GetExpensesParams) middleware.Responder {
	return fn(params)
}

// GetExpensesHandler interface for that can handle valid get expenses params
type GetExpensesHandler interface {
	Handle(GetExpensesParams) middleware.Responder
}

// NewGetExpenses creates a new http.Handler for the get expenses operation
func NewGetExpenses(ctx *middleware.Context, handler GetExpensesHandler) *GetExpenses {
	return &GetExpenses{Context: ctx, Handler: handler}
}

/*GetExpenses swagger:route GET /expenses getExpenses

Get all expenses

*/
type GetExpenses struct {
	Context *middleware.Context
	Handler GetExpensesHandler
}

func (o *GetExpenses) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetExpensesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
