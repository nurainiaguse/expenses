// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/nurainiaguse/expenses/api/v1/models"
)

// GetExpenseByIDOKCode is the HTTP code returned for type GetExpenseByIDOK
const GetExpenseByIDOKCode int = 200

/*GetExpenseByIDOK OK

swagger:response getExpenseByIdOK
*/
type GetExpenseByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Expense `json:"body,omitempty"`
}

// NewGetExpenseByIDOK creates GetExpenseByIDOK with default headers values
func NewGetExpenseByIDOK() *GetExpenseByIDOK {

	return &GetExpenseByIDOK{}
}

// WithPayload adds the payload to the get expense by Id o k response
func (o *GetExpenseByIDOK) WithPayload(payload *models.Expense) *GetExpenseByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get expense by Id o k response
func (o *GetExpenseByIDOK) SetPayload(payload *models.Expense) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExpenseByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetExpenseByIDBadRequestCode is the HTTP code returned for type GetExpenseByIDBadRequest
const GetExpenseByIDBadRequestCode int = 400

/*GetExpenseByIDBadRequest BAD REQUEST

swagger:response getExpenseByIdBadRequest
*/
type GetExpenseByIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.RouteError `json:"body,omitempty"`
}

// NewGetExpenseByIDBadRequest creates GetExpenseByIDBadRequest with default headers values
func NewGetExpenseByIDBadRequest() *GetExpenseByIDBadRequest {

	return &GetExpenseByIDBadRequest{}
}

// WithPayload adds the payload to the get expense by Id bad request response
func (o *GetExpenseByIDBadRequest) WithPayload(payload *models.RouteError) *GetExpenseByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get expense by Id bad request response
func (o *GetExpenseByIDBadRequest) SetPayload(payload *models.RouteError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExpenseByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
